version: '3.8'

# PROFILES:
# unit - minimal build (only backend, unit tests, linter, typing)
# dev - dev build
# test - dev build + e2e tests

services:
# Dev containers
  portainer:
    # Container management
    image: portainer/portainer-ce:2.16.2
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer-data:/data
    ports:
      - ${PORTAINER_PORT}:${PORTAINER_PORT}
    profiles: [
      'dev',
      'test',
    ]

  database:
    container_name: postgres
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:${POSTGRES_DATA_DIR}
    ports:
      - ${DATABASE_PORT}:${DATABASE_PORT}
    env_file:
      - ./.database.env
    healthcheck:
      test: pg_isready -U ${SQL_USER} -d ${SQL_DATABASE}
      interval: 1s
      retries: 30
      timeout: 1s
    logging:
      options:
        max-size: 100m
    profiles: [
      'dev',
      'test',
      'unit',
    ]

  logging-db:
    # Database for mainapp logging
    container_name: mongodb
    image: mongo:4.0.4
    ports:
      - ${LOGGING_DB_PORT}:${LOGGING_DB_PORT}
    volumes:
      - mongodb_data:${MONGODB_DATA_DIR}
    env_file:
      - ./.logging-db.env
    healthcheck:
      test: mongo --eval 'db.runCommand("ping").ok' localhost:${LOGGING_DB_PORT} --quiet
      interval: 5s
      retries: 10
      start_period: 15s
      timeout: 10s
    logging:
      options:
        max-size: 50m
    profiles: [
      'dev',
      'test',
      'unit',
    ]

  message-broker:
    container_name: redis
    image: redis:6.2.7-alpine
    ports:
      - ${MESSAGE_BROKER_PORT}:${MESSAGE_BROKER_PORT}
    logging:
      options:
        max-size: 50m
    profiles: [
      'dev',
      'test',
      'unit',
    ]

  log-cli:
    # Log CLI tool for Mongodb
    container_name: log-cli
    tty: true
    build:
      context: ./racks_log_cli
      dockerfile: Dockerfile
    env_file:
      - ./racks_log_cli/.log-cli.env
    logging:
      options:
        max-size: 50m
    depends_on:
      - logging-db
    profiles: [
      'dev',
      'test',
    ]

  backend:
    &django
    container_name: django
    domainname: backend
    entrypoint: ${BASE_APP_DIR}${BACKEND_ENTRYPOINTS_DIR}entrypoint_main.sh
    build:
      context: ./
      dockerfile: Dockerfile
    healthcheck:
      test: curl -f http://${LOCALHOST}:${BACKEND_PORT}/api/v1 || exit 1
      interval: 5s
      retries: 20
      start_period: 15s
      timeout: 10s
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    logging:
      options:
        max-size: 100m
    stdin_open: true
    tty: true
    volumes:
      - static_volume:${BASE_APP_DIR}${STATIC_PATH}
    env_file:
      - ./.env
      - ./.backend.env
      - ./.database.env
      - ./.logging-db.env
      - ./e2e_tests/.test-runner.env
    depends_on:
      database:
        condition: service_healthy
      logging-db:
        condition: service_healthy
    profiles: [
      'dev',
      'test',
      'unit',
    ]

  # Containers for linter, type check and unit tests
  django-linter:
    <<: *django
    container_name: django-linter
    entrypoint: ${BASE_APP_DIR}${BACKEND_ENTRYPOINTS_DIR}entrypoint_linter.sh
    volumes:
      - log_volume:${BASE_APP_DIR}${LOGS_PATH}
    ports:
      - ${BACKEND_PORT_RESERVE}:${BACKEND_PORT_RESERVE}

  django-unit-tests:
    <<: *django
    container_name: django-unit-tests
    entrypoint: ${BASE_APP_DIR}${BACKEND_ENTRYPOINTS_DIR}entrypoint_unit.sh
    volumes:
      - static_volume:${BASE_APP_DIR}${STATIC_PATH}
      - log_volume:${BASE_APP_DIR}${LOGS_PATH}
    ports:
      - ${BACKEND_PORT_RESERVE2}:${BACKEND_PORT_RESERVE2}

  django-typing:
    <<: *django
    container_name: django-typing
    entrypoint: ${BASE_APP_DIR}${BACKEND_ENTRYPOINTS_DIR}entrypoint_typing.sh
    volumes:
      - log_volume:${BASE_APP_DIR}${LOGS_PATH}
    ports:
      - ${BACKEND_PORT_RESERVE3}:${BACKEND_PORT_RESERVE3}

  worker:
    container_name: celery-worker
    build: .
    entrypoint: celery -A ${APP_NAME} worker -l INFO
    volumes:
      - backups_volume:${BASE_APP_DIR}${BACKUP_PATH}
      - static_volume:${BASE_APP_DIR}${STATIC_PATH}
    env_file:
      - ./.env
      - ./.backend.env
      - ./.database.env
      - ./.logging-db.env
    logging:
      options:
        max-size: 50m
    depends_on:
      backend:
        condition: service_healthy
      message-broker:
        condition: service_started
    profiles: [
      'dev',
      'test',
      'unit',
    ]
  
  cron:
    # Celery cron for data backups
    container_name: celery-beat
    build: .
    entrypoint: celery -A ${APP_NAME} beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - backups_volume:${BASE_APP_DIR}${BACKUP_PATH}
      - static_volume:${BASE_APP_DIR}${STATIC_PATH}
    env_file:
      - ./.env
      - ./.backend.env
      - ./.database.env
      - ./.logging-db.env
    logging:
      options:
        max-size: 50m
    depends_on:
      backend:
        condition: service_healthy
      message-broker:
        condition: service_started
      worker:
        condition: service_started
    profiles: [
      'dev',
      'test',
      'unit',
    ]

  frontend:
    container_name: vue
    domainname: frontend
    command: npm run serve
    build:
      context: ./racks_frontend
      dockerfile: Dockerfile
    healthcheck:
      test: curl -f http://${LOCALHOST}:${FRONTEND_PORT} || exit 1
      interval: 5s
      retries: 10
      start_period: 15s
      timeout: 10s
    volumes:
      - vue_dist:${VUE_DIST_DIR}
    logging:
      options:
        max-size: 100m
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    depends_on:
      - backend
    profiles: [
      'dev', 
      'test',
    ]
      
  web-server:
    container_name: nginx
    build: ./nginx
    ports:
      - ${WEB_SERVER_PORT}:${WEB_SERVER_PORT}
    logging:
      options:
        max-size: 50m
    volumes:
      - static_volume:${BASE_APP_DIR}${STATIC_PATH}
      - vue_dist:${VUE_DIST_DIR}
    depends_on:
      - backend
      - frontend
    profiles: [
      'dev',
      'test',
    ]

  flower:
    # Celery monitoring
    container_name: flower
    image: mher/flower:1.2.0
    command: celery flower --persisten=True
    ports:
      - ${FLOWER_PORT}:${FLOWER_PORT}
    volumes:
      - flower_data:${FLOWER_DATA_DIR}
    env_file:
      - ./.flower.env
    depends_on:
      - frontend
      - message-broker
      - worker
      - cron
    profiles: [
      'dev',
      'test',
    ]

# E2E testing containers
  frontend-testing:
    # Frontend for seleium grid
    container_name: vue-testing
    domainname: frontend-testing
    command: npm run serve -- --port ${FRONTEND_TESTING_PORT}
    build:
      context: ./racks_frontend
      dockerfile: Dockerfile_test
    healthcheck:
      test: curl -f http://${LOCALHOST}:${FRONTEND_TESTING_PORT} || exit 1
      interval: 5s
      retries: 10
      start_period: 15s
      timeout: 10s
    volumes:
      - vue_dist:${VUE_DIST_DIR}
    ports:
      - ${FRONTEND_TESTING_PORT}:${FRONTEND_TESTING_PORT}
    logging:
      options:
        max-size: 100m
    depends_on:
      backend:
        condition: service_healthy
    profiles: [
      'test',
    ]

  hub:
    container_name: hub
    image: selenium/hub:4.1.3
    ports:
      - ${SE_EVENT_BUS_PUBLISH_PORT}:${SE_EVENT_BUS_PUBLISH_PORT}
      - ${SE_EVENT_BUS_SUBSCRIBE_PORT}:${SE_EVENT_BUS_SUBSCRIBE_PORT}
      - ${SELENIUM_HUB_PORT}:${SELENIUM_HUB_PORT}
    depends_on:
      frontend-testing: 
        condition: service_healthy
    profiles: [
      'test',
    ]

  selenium:
    image: selenium/node-chrome:4.1.3
    shm_size: 1gb
    # For some reasons cant work properly with env files
    environment:
      - SE_EVENT_BUS_HOST=${SE_HUB_CONTAINER_NAME}
      - SE_EVENT_BUS_PUBLISH_PORT=${SE_EVENT_BUS_PUBLISH_PORT}
      - SE_EVENT_BUS_SUBSCRIBE_PORT=${SE_EVENT_BUS_SUBSCRIBE_PORT}
      - NODE_MAX_SESSION=4
      - NODE_MAX_INSTANCES=4
      - VNC_NO_PASSWORD=1
    healthcheck:
        test: curl -f http://${SE_HUB_CONTAINER_NAME}:${SELENIUM_HUB_PORT}|| exit 1
        interval: 5s
        timeout: 10s
        retries: 15
        start_period: 10s 
    entrypoint: bash -c 'SE_OPTS="--host $$HOSTNAME" /opt/bin/entry_point.sh'
    deploy:
      # /e2e_tests/.test-runner.env NUMBER_OF_THREADS
      replicas: ${SELENIUM_INSTANCES}
    depends_on:
      hub:
        condition: service_started
      frontend-testing:
        condition: service_healthy
    profiles: [
      'test',
    ]

  test-runner:
    # E2E tests
    container_name: e2e-tests
    build:
      context: ./e2e_tests
      dockerfile: Dockerfile
    command: python run_threads.py
    env_file:
      - ./.env
      - ./e2e_tests/.test-runner.env
    logging:
      options:
        max-size: 100m
    volumes:
      - test_results:${BASE_TEST_DIR}${TEST_RESULTS_PATH}
      - screenshots:${BASE_TEST_DIR}${SCREENSHOTS_PATH}
    depends_on:
      backend:
        condition: service_healthy
      frontend-testing:
        condition: service_healthy
      hub:
        condition: service_started
      selenium:
        condition: service_healthy
    profiles: [
      'test',
    ]


volumes:
  postgres_data:
  mongodb_data:
  flower_data:
  static_volume:
  log_volume: # log files for mypy, flake8, unittest
  backups_volume:
  test_results:
  screenshots:
  vue_dist:
