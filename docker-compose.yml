version: '3.8'

services:
# Dev containers
  backend:
    container_name: django
    domainname: backend
    build:
      context: ./
      dockerfile: Dockerfile
    healthcheck:
      test: curl -f http://0.0.0.0:8000/api/v1 || exit 1
      interval: 5s
      retries: 10
      start_period: 15s
      timeout: 10s
    ports:
      - 8000:8000
    logging:
      options:
        max-size: 100m
    volumes:
      - static_volume:/home/app/web/static
      - log_volume:/home/app/web/logs
    env_file:
      - ./.env
      - ./e2e_tests/.env_test
    profiles: ['dev', 'test']
    depends_on:
      database:
        condition: service_healthy
      logging-db:
        condition: service_healthy
  
  cron:
    # Celery cron for data backups
    container_name: celery-beat
    build: .
    entrypoint: celery -A racks beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - backups_volume:/home/app/web/backup
    env_file:
      - ./.env
    logging:
      options:
        max-size: 50m
    profiles: ['dev', 'test']
    depends_on:
      backend:
        condition: service_healthy
      message-broker:
        condition: service_started
      worker:
        condition: service_started

  worker:
    container_name: celery-worker
    build: .
    entrypoint: celery -A racks worker -l INFO
    volumes:
      - backups_volume:/home/app/web/backup
    env_file:
      - ./.env
    logging:
      options:
        max-size: 50m
    profiles: ['dev', 'test']
    depends_on:
      backend:
        condition: service_healthy
      message-broker:
        condition: service_started
  
  message-broker:
    container_name: redis
    image: redis:6.2.7-alpine
    logging:
      options:
        max-size: 50m
    profiles: ['dev', 'test']

  database:
    container_name: postgres
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env_db
    healthcheck:
      test: pg_isready -U ${SQL_USER} -d ${SQL_DATABASE}
      interval: 1s
      retries: 30
      timeout: 1s
    logging:
      options:
        max-size: 100m
    profiles: ['dev', 'test']

  frontend:
    container_name: vue
    domainname: frontend
    command: npm run serve
    build:
      context: ./racks_frontend
      dockerfile: Dockerfile
    healthcheck:
      test: curl -f http://0.0.0.0:8080 || exit 1
      interval: 5s
      retries: 10
      start_period: 15s
      timeout: 10s
    volumes:
      - vue_dist:/app/dist
    logging:
      options:
        max-size: 100m
    ports:
      - 8080:8080
    profiles: ['dev', 'test']
    depends_on:
      - backend
      
  web-server:
    container_name: nginx
    build: ./nginx
    ports:
      - 80:80
    logging:
      options:
        max-size: 50m
    volumes:
      - static_volume:/home/app/web/static
      - vue_dist:/app/dist
    profiles: ['dev', 'test']
    depends_on:
      - backend
      - frontend

  logging-db:
    # Database for mainapp logging
    container_name: mongodb
    image: mongo:4.0.4
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db
    env_file:
      - ./.env_log
    healthcheck:
      test: mongo --eval 'db.runCommand("ping").ok' localhost:27017 --quiet
      interval: 5s
      retries: 10
      start_period: 15s
      timeout: 10s
    logging:
      options:
        max-size: 50m
    profiles: ['dev', 'test']

# E2E testing containers
  selenium:
    container_name: chrome
    image: selenium/standalone-chrome
    extra_hosts:
      - host.docker.internal:host-gateway
    env_file:
      - ./e2e_tests/.env_test
    volumes:
      - /dev/shm:/dev/shm
    ports:
      - 4444:4444
    logging:
      options:
        max-size: 50m
    profiles: ['test']
    depends_on:
      - frontend-testing
      - backend
  
  test-runner:
    # E2E tests
    container_name: e2e_tests
    build:
      context: ./e2e_tests
      dockerfile: Dockerfile
    command: python e2e_tests.py
    env_file:
      - ./e2e_tests/.env_test
    logging:
      options:
        max-size: 100m
    volumes:
      - test_results:/home/app/test/test_results
    profiles: ['test']
    depends_on:
      backend:
        condition: service_healthy
      frontend-testing:
        condition: service_healthy
      selenium:
        condition: service_started
  
  frontend-testing:
    # Frontend for seleium grid
    container_name: vue-testing
    domainname: frontend-testing
    command: npm run serve -- --port 8081
    build:
      context: ./racks_frontend
      dockerfile: Dockerfile_test
    healthcheck:
      test: curl -f http://0.0.0.0:8081 || exit 1
      interval: 5s
      retries: 10
      start_period: 15s
      timeout: 10s
    volumes:
      - vue_dist:/app/dist
    ports:
      - 8081:8081
    logging:
      options:
        max-size: 100m
    profiles: ['test']
    depends_on:
      - backend


volumes:
  postgres_data:
  mongodb_data:
  static_volume:
  log_volume: # log files for mypy, flake8, unittest
  backups_volume:
  test_results:
  vue_dist:
  